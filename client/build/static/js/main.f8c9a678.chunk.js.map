{"version":3,"sources":["Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","App","useState","showOwner","setshowOwner","Candidates","setCandidates","Owner","setOwner","Contract","setContract","VoterAddress","setVoterAddress","CandidateName","setCandidateName","CandidateID","setCandidateID","CurrentAccount","setCurrentAccount","HowTo","setHowTo","Winner","setWinner","showWinner","setshowWinner","showTable","setshowTable","useEffect","LoadWeb3","LoadBlockchainData","a","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","account","net","getId","networkID","networkData","abi","networks","console","log","contract","address","methods","contractOwner","call","Cand_id","x","arr","i","candidates","id","name","Voter_Registration","send","from","Candidate_Registration","then","events","Candidate_Register","returnValues","Candidate_ID","nam","Candidate_Name","num","Cast_Vote","Current_Leader","winner_name","current_winner","votes","onClick","map","value","onChange","e","target","placeholder","Add_Voter","Add_Candidate","castVote","get_winner","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8c9a678.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"main\">\r\n            <h1>The Poll Booth</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport abi from './contracts/Election.json';\nimport Web3 from \"web3\";\nimport Header from './Header'\n\nfunction App() {\n  \n  const [showOwner, setshowOwner] = useState(false)\n  const [Candidates, setCandidates] = useState([])\n  const [Owner, setOwner] = useState()\n  const [Contract, setContract] = useState()\n  const [VoterAddress, setVoterAddress] = useState(\"\")\n  const [CandidateName, setCandidateName] = useState(\"\")\n  const [CandidateID, setCandidateID] = useState()\n  const [CurrentAccount, setCurrentAccount] = useState()\n  const [HowTo, setHowTo] = useState(false)\n  const [Winner, setWinner] = useState()\n  const [showWinner, setshowWinner] = useState(false)\n  const [showTable, setshowTable] = useState(false)\n\n\n\n  useEffect(() => {\n    LoadWeb3()\n    LoadBlockchainData()\n  },[])\n\n  const LoadWeb3 = async () =>{\n    if (window.ethereum){\n    window.web3 = new Web3(window.ethereum)\n    await window.ethereum.enable()\n    } else if (window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else{\n      window.alert(\"Non Ethereum Browser Detected\")\n    }\n  }\n\n  const LoadBlockchainData = async () =>{\n    const web3 = window.web3;\n    const account = await web3.eth.getAccounts();\n    setCurrentAccount(account[0])\n    \n    const networkID = await web3.eth.net.getId();\n    const networkData = abi.networks[networkID];\n    console.log(networkID, networkData)\n\n    if(networkData){\n      const contract = new web3.eth.Contract(abi.abi, networkData.address);\n      window.alert(\"Contract Loaded correctly\")\n      setContract(contract)\n      setOwner(await contract.methods.contractOwner().call())\n\n      var x = await contract.methods.Cand_id().call()\n      var arr = []\n\n      for(var i= 0; i<x; i++){\n        var a = await contract.methods.candidates(i).call()\n        arr = [...arr, {id:i+1,name:a.name}]\n      }\n      setCandidates(arr)\n    }\n\n    else{\n      window.alert(\"Contract Not loaded\")\n    }\n  \n  }\n\n  async function Add_Voter(address){\n    try{\n      await Contract.methods.Voter_Registration(address).send({from:CurrentAccount})\n      window.alert(\"Voter is Registered\")\n    }\n    catch(err){\n      window.alert(\"Voter cannot be registered because the address already exists or is not authorized to perform this action.\")\n    }\n    setVoterAddress(\"\")\n  }\n\n  async function Add_Candidate(name){\n\n    try{\n      await Contract.methods.Candidate_Registration(name).send({from:CurrentAccount}).then(\n      (a)=>{\n        let id = a.events.Candidate_Register.returnValues.Candidate_ID\n        let nam = a.events.Candidate_Register.returnValues.Candidate_Name\n        setCandidates([...Candidates, {id:id, name:nam}])\n        })\n    }\n    catch(err){\n      window.alert(\"This action is not allowed because a candidate is already registered on this address\")\n    }\n    setCandidateName(\"\")\n  }\n\n\n  async function castVote(num){\n    try{\n      await Contract.methods.Cast_Vote(num).send({from:CurrentAccount})\n      window.alert(\"Your vote was casted to \" + Candidates[num-1].name)\n    }\n    catch{\n      window.alert(\"Action not allowed\")\n    }\n  }\n\n  async function get_winner(){\n    await Contract.methods.Current_Leader().send({from:CurrentAccount}).then(\n      (a)=>{\n        let winner_name = a.events.current_winner.returnValues.Candidate_Name\n        let votes = a.events.current_winner.returnValues.votes\n        setWinner({name:winner_name, votes:votes})\n      }\n    )\n  }\n  \n  return (\n    <div className=\"App\">\n      <Header/>\n  \n      <p>Your current user address is {CurrentAccount}</p>\n\n      <div className=\"grid\">\n        <button onClick={async () => await window.web3.eth.getAccounts().then((account) => setCurrentAccount(account[0]))}>Refresh Account</button>\n\n        <button  onClick = {() => setshowTable(!showTable)}>View Candidates</button>\n\n      </div>\n      \n            {showTable && \n            \n              <table className='tablediv'>\n                <tr>\n                  <th className='firstrow'>ID</th>\n                  <th className='firstrow'>Name</th>\n                </tr>\n                {Candidates.map((i)=>\n                <tr>\n                  <td>{i.id}</td>\n                  <td>{i.name}</td>\n                </tr>)}\n                </table>}\n            \n\n            \n\n      <div className=\"grid\">\n        \n          <div className=\"features\">\n              <h3 className='features_head'>Register Voters</h3>\n\n              <div className=\"features_body\">\n                  <input value={VoterAddress} onChange={(e)=>setVoterAddress(e.target.value)} placeholder='Address'></input>\n                  <label>Voter Address</label>\n                  <button onClick={() => Add_Voter(VoterAddress)}>Add Voter</button>\n              </div>\n          </div>\n\n\n          <div className=\"features\">\n              <h3 className='features_head'>Register Candidate</h3>\n              <div className=\"features_body\">\n                  <input value={CandidateName} onChange={(e)=>setCandidateName(e.target.value)} placeholder='Name'></input>\n                  <label>Candidate Name</label>\n                  <button onClick = {() => Add_Candidate(CandidateName)}>Add Candidate</button>\n              </div>\n          </div>\n\n\n          <div className=\"features\">\n              <h3 className='features_head'>Cast Vote</h3>\n              <div className=\"features_body\">\n                  <input value={CandidateID} onChange={(e)=>setCandidateID(e.target.value)} placeholder='Candidate ID'></input>\n                  \n                  <label>Candidate ID</label>\n                  <button onClick={()=> castVote(CandidateID)}>Cast Vote</button>\n              </div>\n          </div>\n\n\n          <div className=\"features\">\n              <h3 className='features_head'>Get Winner</h3>\n              <div className=\"features_body\">\n                  <button onClick={()=>get_winner().then(()=>setshowWinner(!showWinner))}>Get Winner</button>\n                  <h4>{showWinner && <div>{Winner.name} is leading with {Winner.votes}</div>}</h4>\n              </div>\n          </div>\n\n      </div>\n\n      <div className='grid'>\n      \n      <button onClick={()=>setHowTo(!HowTo)}>How to use the application</button>\n\n      <button onClick={()=>setshowOwner(!showOwner)}>Organizer's Address</button>\n      </div>\n\n\n\n      {HowTo && <div className='howto' onClick={()=>(setHowTo(!HowTo))}>\n\n        <h3>How to use this application</h3>\n        <li>Only the election organizer is allowed to Register voters. Addresses would be required to register voters.</li>\n        <li>Self registration for anyone who wants to stand in the election. Enter your name and click Register.</li>\n        <li>Enter the number next to candidate of your choice to cast the vote. Only one vote per address is allowed.</li>\n        <li>Winners can be checked by anyone, but Winner option would be blocked for both voters and candidates. It will only be visible to the organizers.</li>\n      </div> }\n\n\n      {showOwner && <div>{Owner}</div>}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}